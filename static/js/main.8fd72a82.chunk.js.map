{"version":3,"sources":["utils/Loader.js","home/index.js","utils/ScrollContainer.js","App.js","reportWebVitals.js","sw.js","index.js"],"names":["LoadContainer","styled","div","Loader","className","size","thickness","color","secondaryColor","speed","React","PureComponent","HomePage","lazy","Home","fallback","ScrollContainer","state","scrollContainer","createRef","this","setState","current","view","style","height","ref","scrollAxis","props","children","Component","defaultProps","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceworker"],"mappings":"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","file":"static/js/main.8fd72a82.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { SpinnerCircular } from \"spinners-react\";\r\nconst LoadContainer = styled.div`\r\n  position: fixed;\r\n  width: 100%;\r\n  height: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  background: #262626;\r\n`;\r\nexport default class Loader extends React.PureComponent {\r\n  render() {\r\n    return (\r\n      <LoadContainer className=\"preloader\">\r\n        <div className=\"preloader__content\">\r\n          <div className=\"preloader__circle\">\r\n            <SpinnerCircular\r\n              size=\"100%\"\r\n              thickness={8}\r\n              color=\"#ffffff\"\r\n              secondaryColor=\"#555555\"\r\n              speed={110}\r\n            />\r\n          </div>\r\n          <div className=\"preloader__header\">\r\n            <div className=\"preloader__heading h2-light h2\">Nitesh Kumar</div>\r\n            <div className=\"preloader__subline small-caps mt-1\">\r\n              Creative Developer\r\n            </div>\r\n          </div>\r\n          <div className=\"preloader__counter h5 h5-light\">&nbsp;</div>\r\n        </div>\r\n        <div className=\"preloader__curtain\"></div>\r\n      </LoadContainer>\r\n    );\r\n  }\r\n}\r\n","import React, { Suspense } from \"react\";\r\nimport Loader from \"../utils/Loader\";\r\nimport \"./index.css\";\r\nconst HomePage = React.lazy(() => import(\"./Home\"));\r\nexport default class Home extends React.PureComponent {\r\n  componentDidMount() {}\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Suspense fallback={<Loader />}>\r\n          <HomePage />\r\n        </Suspense>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { ParallaxProvider } from \"react-scroll-parallax\";\r\nimport Scrollbars from \"react-custom-scrollbars\";\r\n\r\nexport default class ScrollContainer extends React.Component {\r\n  static defaultProps = {\r\n    scrollAxis: \"vertical\",\r\n  };\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      scrollContainer: null,\r\n    };\r\n    this.scrollContainer = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ scrollContainer: this.scrollContainer.current.view });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Scrollbars\r\n        style={{ height: \"100vh\" }}\r\n        className=\"scroll-container\"\r\n        ref={this.scrollContainer}>\r\n        <ParallaxProvider\r\n          scrollContainer={this.state.scrollContainer}\r\n          scrollAxis={this.props.scrollAxis}>\r\n          {this.props.children}\r\n        </ParallaxProvider>\r\n      </Scrollbars>\r\n    );\r\n  }\r\n}\r\n","import \"./App.css\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Home from \"./home\";\nimport ScrollContainer from \"./utils/ScrollContainer\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <ScrollContainer>\n          <Switch>\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </ScrollContainer>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (\"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport * as serviceworker from \"./sw\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nserviceworker.register();\n"],"sourceRoot":""}